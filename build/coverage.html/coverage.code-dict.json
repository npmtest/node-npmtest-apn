{"/home/travis/build/npmtest/node-npmtest-apn/test.js":"/* istanbul instrument in package npmtest_apn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apn/lib.npmtest_apn.js":"/* istanbul instrument in package npmtest_apn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apn = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apn = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apn/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apn && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apn\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apn.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_apn.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apn.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_apn.__dirname +\n                    '/lib.npmtest_apn.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apn/apn/index.js":"const debug = require(\"debug\")(\"apn\");\n\nconst credentials = require(\"./lib/credentials\")({\n  logger: debug\n});\n\nconst config = require(\"./lib/config\")({\n  logger: debug,\n  prepareCertificate: credentials.certificate,\n  prepareToken: credentials.token,\n  prepareCA: credentials.ca,\n});\n\nconst tls = require(\"tls\");\n\nconst framer     = require(\"http2/lib/protocol/framer\");\nconst compressor = require(\"http2/lib/protocol/compressor\");\n\nconst protocol = {\n  Serializer:   framer.Serializer,\n  Deserializer: framer.Deserializer,\n  Compressor:   compressor.Compressor,\n  Decompressor: compressor.Decompressor,\n  Connection:   require(\"http2/lib/protocol/connection\").Connection,\n};\n\nconst Endpoint = require(\"./lib/protocol/endpoint\")({\n  tls,\n  protocol,\n});\n\nconst EndpointManager = require(\"./lib/protocol/endpointManager\")({\n  Endpoint,\n});\n\nconst Client = require(\"./lib/client\")({\n  config,\n  EndpointManager,\n});\n\nconst Provider = require(\"./lib/provider\")({\n  Client,\n});\n\nconst Notification = require(\"./lib/notification\");\n\nconst token = require(\"./lib/token\");\n\nmodule.exports = {\n  Provider,\n  Notification,\n  token,\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/index.js":"\"use strict\";\n\nmodule.exports = function (dependencies) {\n  const logger = dependencies.logger;\n\n  const resolve = require(\"./resolve\");\n\n  const parseCertificate = require(\"./certificate/parse\")({\n    parsePkcs12:  require(\"./certificate/parsePkcs12\"),\n    parsePemKey:  require(\"./certificate/parsePemKey\"),\n    parsePemCert: require(\"./certificate/parsePemCertificate\"),\n  });\n\n  const loadCertificate = require(\"./certificate/load\")({\n    resolve\n  });\n\n  const prepareCertificate = require(\"./certificate/prepare\")({\n    load: loadCertificate,\n    parse: parseCertificate,\n    validate: require(\"./certificate/validate\"),\n    logger: logger,\n  });\n\n    const sign = require(\"jsonwebtoken/sign\");\n    const decode = require(\"jsonwebtoken/decode\");\n\n  const prepareToken = require(\"./token/prepare\")({\n    sign,\n    resolve,\n    decode\n  });\n\n  const prepareCA = require(\"./ca/prepare\")({\n    resolve,\n  });\n\n  return {\n    certificate: prepareCertificate,\n    token: prepareToken,\n    ca: prepareCA,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/resolve.js":"\"use strict\";\n\nconst fs = require(\"fs\");\n\nfunction resolveCredential(value) {\n  if (!value) {\n    return value;\n  }\n  if(/-----BEGIN ([A-Z\\s*]+)-----/.test(value)) {\n    return value;\n  }\n  else if(Buffer.isBuffer(value)) {\n    return value;\n  }\n  else {\n    return fs.readFileSync(value);\n  }\n}\n\nmodule.exports = resolveCredential;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/parse.js":"\"use strict\";\n\nmodule.exports = function (dependencies) {\n  const parsePkcs12 = dependencies.parsePkcs12;\n  const parsePemKey = dependencies.parsePemKey;\n  const parsePemCert = dependencies.parsePemCert;\n  function parse(credentials) {\n    var parsed = {};\n\n    parsed.key = parsePemKey(credentials.key, credentials.passphrase);\n    parsed.certificates = parsePemCert(credentials.cert);\n\n    var pkcs12Parsed = parsePkcs12(credentials.pfx, credentials.passphrase);\n    if (pkcs12Parsed) {\n      parsed.key = pkcs12Parsed.key;\n      parsed.certificates = pkcs12Parsed.certificates;\n    }\n\n    return parsed;\n  }\n\n  return parse;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/parsePkcs12.js":"\"use strict\";\n\nlet forge = require(\"node-forge\");\n\nlet APNKey = require(\"./APNKey\");\nlet APNCertificate = require(\"./APNCertificate\");\n\nfunction decryptPkcs12FromAsn1(asn1, passphrase) {\n  try {\n    return forge.pkcs12.pkcs12FromAsn1(asn1, false, passphrase);\n  }\n  catch (e) {\n    // OpenSSL-exported files need an empty string, if no password was specified\n    // during export.\n    if (passphrase) {\n      throw e;\n    }\n    return forge.pkcs12.pkcs12FromAsn1(asn1, false, \"\");\n  }\n}\n\nfunction apnCredentialsFromPkcs12(p12Data, passphrase) {\n  if (!p12Data) {\n    return;\n  }\n\n  let asn1 = forge.asn1.fromDer(p12Data.toString(\"binary\"), false);\n  let pkcs12;\n  try {\n    pkcs12 = decryptPkcs12FromAsn1(asn1, passphrase);\n  }\n  catch(e) {\n    if (e.message.match(\"Invalid password\")) {\n      throw new Error(\"unable to parse credentials, incorrect passphrase\");\n    }\n    else {\n      throw new Error(\"unable to parse credentials, not a PFX/P12 file\");\n    }\n  }\n\n  let credentials = { \"key\": null, \"certificates\": []};\n  pkcs12.safeContents.forEach(function(safeContents) {\n    safeContents.safeBags.forEach(function(safeBag) {\n      if(safeBag.type === forge.pki.oids.pkcs8ShroudedKeyBag) {\n        if(credentials.key) {\n          throw new Error(\"multiple keys found in PFX/P12 file\");\n        }\n        credentials.key = new APNKey(safeBag.key);\n      }\n      else if(safeBag.type === forge.pki.oids.certBag) {\n        credentials.certificates.push(new APNCertificate(safeBag.cert));\n      }\n    });\n  });\n\n  return credentials;\n}\n\nmodule.exports = apnCredentialsFromPkcs12;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/APNKey.js":"\"use strict\";\n\nvar forge = require(\"node-forge\");\n\nfunction APNKey(key) {\n  if(!key || !key.n || !key.e) {\n    throw new Error(\"key is not a valid public key\");\n  }\n\n  this._key = key;\n}\n\nAPNKey.prototype.fingerprint = function() {\n  return forge.pki.getPublicKeyFingerprint(this._key, {encoding: \"hex\"});\n};\n\nmodule.exports = APNKey;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/APNCertificate.js":"\"use strict\";\n\nconst APNKey = require(\"./APNKey\");\nconst oids = require(\"./oids\");\n\nfunction APNCertificate(cert) {\n  if(!cert.publicKey || !cert.validity || !cert.subject) {\n    throw new Error(\"certificate object is invalid\");\n  }\n\n  this._cert = cert;\n}\n\nAPNCertificate.prototype.key = function() {\n  return new APNKey(this._cert.publicKey);\n};\n\nAPNCertificate.prototype.validity = function() {\n  return this._cert.validity;\n};\n\nAPNCertificate.prototype.environment = function() {\n  let environment = { sandbox: false, production: false };\n\n  if (this._cert.getExtension({ \"id\": oids.applePushServiceClientDevelopment })) {\n    environment.sandbox = true;\n  }\n\n  if (this._cert.getExtension({ \"id\": oids.applePushServiceClientProduction })) {\n    environment.production = true;\n  }\n  return environment;\n};\n\nmodule.exports = APNCertificate;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/oids.js":"\"use strict\";\n\nvar oids = {\n  \"applePushServiceClientDevelopment\" : \"1.2.840.113635.100.6.3.1\",\n  \"applePushServiceClientProduction\"  : \"1.2.840.113635.100.6.3.2\",\n};\n\nmodule.exports = oids;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/parsePemKey.js":"\"use strict\";\n\nconst forge = require(\"node-forge\");\n\nconst APNKey = require(\"./APNKey\");\n\nfunction findAndDecryptKey(pemMessages, passphrase) {\n  let apnKey = null;\n  pemMessages.forEach(function(message) {\n    if (!message.type.match(/KEY/)) {\n      return;\n    }\n\n    let key = forge.pki.decryptRsaPrivateKey(forge.pem.encode(message), passphrase);\n\n    if(!key) {\n      if ((message.procType && message.procType.type === \"ENCRYPTED\") || message.type.match(/ENCRYPTED/)) {\n        throw new Error(\"unable to parse key, incorrect passphrase\");\n      }\n    }\n    else if(apnKey) {\n      throw new Error(\"multiple keys found in PEM file\");\n    }\n    else {\n      apnKey = new APNKey(key);\n    }\n  });\n  return apnKey;\n}\n\nfunction apnKeyFromPem(keyPem, passphrase) {\n  if (!keyPem) {\n    return null;\n  }\n\n  try {\n    let pemMessages = forge.pem.decode(keyPem);\n    let apnKey = findAndDecryptKey(pemMessages, passphrase);\n    if (apnKey) {\n      return apnKey;\n    }\n  }\n  catch (e) {\n    if (e.message.match(/Unsupported OID/)) {\n      throw new Error(\"unable to parse key, unsupported format: \" + e.oid);\n    }\n    else if(e.message.match(/Invalid PEM formatted message/)) {\n      throw new Error(\"unable to parse key, not a valid PEM file\");\n    }\n    else if (e.message.match(/multiple keys/)) {\n      throw e;\n    }\n    else if (e.message.match(/unable to parse key/)) {\n      throw e;\n    }\n  }\n  throw new Error(\"unable to parse key, no private key found\");\n}\n\nmodule.exports = apnKeyFromPem;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/parsePemCertificate.js":"\"use strict\";\n\nconst forge = require(\"node-forge\");\n\nconst APNCertificate = require(\"./APNCertificate\");\n\nfunction apnCertificateFromPem(certData) {\n  if (!certData) {\n    return null;\n  }\n\n  var pemMessages;\n  try {\n    pemMessages = forge.pem.decode(certData);\n  }\n  catch (e) {\n    if (e.message.match(\"Invalid PEM formatted message.\")) {\n      throw new Error(\"unable to parse certificate, not a valid PEM file\");\n    }\n  }\n  var certificates = [];\n\n  pemMessages.forEach(function(message) {\n    if (!message.type.match(new RegExp(\"CERTIFICATE$\"))) {\n      return;\n    }\n    var certAsn1 = forge.asn1.fromDer(message.body);\n    var forgeCertificate = forge.pki.certificateFromAsn1(certAsn1);\n\n    certificates.push(new APNCertificate(forgeCertificate));\n  });\n  return certificates;\n}\n\nmodule.exports = apnCertificateFromPem;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/load.js":"\"use strict\";\n\nmodule.exports = function(dependencies) {\n  const resolve = dependencies.resolve;\n\n  function loadCredentials(credentials) {\n\n    // Prepare PKCS#12 data if available\n    var pfx = resolve(credentials.pfx || credentials.pfxData);\n\n    // Prepare Certificate data if available.\n    var cert = resolve(credentials.cert || credentials.certData);\n\n    // Prepare Key data if available\n    var key = resolve(credentials.key || credentials.keyData);\n\n    return { pfx: pfx, cert: cert, key: key, passphrase: credentials.passphrase };\n  }\n\n  return loadCredentials;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/prepare.js":"\"use strict\";\n\nmodule.exports = function(dependencies) {\n  const load = dependencies.load;\n  const parse = dependencies.parse;\n  const validate = dependencies.validate;\n\n  const logger = dependencies.logger;\n\n  function loadAndValidate(credentials) {\n    const loaded = load(credentials);\n    let parsed;\n    try {\n      parsed = parse(loaded);\n    } catch(err) {\n      logger(err);\n      return loaded;\n    }\n    parsed.production = credentials.production;\n    validate(parsed);\n    return loaded;\n  }\n\n  return loadAndValidate;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/certificate/validate.js":"\"use strict\";\n\nfunction validateCredentials(credentials) {\n  let certificate = credentials.certificates[0];\n\n  if (credentials.key.fingerprint() !== certificate.key().fingerprint()) {\n    throw new Error(\"certificate and key do not match\");\n  }\n\n  let validity = certificate.validity();\n  if (validity.notAfter.getTime() < Date.now()) {\n    throw new Error(\"certificate has expired: \" + validity.notAfter.toJSON());\n  }\n\n  if (credentials.production !== undefined) {\n    let environment = certificate.environment();\n    if ( (credentials.production && !environment.production) ||\n      (!credentials.production && !environment.sandbox)) {\n      throw new Error(\"certificate does not support configured environment, production: \" + credentials.production);\n    }\n  }\n}\n\nmodule.exports = validateCredentials;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/token/prepare.js":"\"use strict\";\n\nconst VError = require(\"verror\");\n\nmodule.exports = function (dependencies) {\n  const sign = dependencies.sign;\n  const decode = dependencies.decode;\n  const resolve = dependencies.resolve;\n\n  function prepareToken(options) {\n    let keyData;\n    try {\n      keyData = resolve(options.key);\n    } catch (err) {\n      throw new VError(err, \"Failed loading token key\");\n    }\n\n    try {\n      let token = sign.bind(null, {}, keyData, {\n        algorithm: \"ES256\", \n        issuer: options.teamId, \n        header: { kid: options.keyId }\n      });\n\n      return {\n        generation: 0,\n        current: token(),\n        iat: null,\n        regenerate(generation) {\n          if (generation === this.generation) {\n            this.generation += 1;\n            this.current = token();\n            this.iat = null;\n          }\n        },\n        isExpired(validSeconds) {\n          if (this.iat == null) {\n            let decoded = decode(this.current);\n            this.iat = decoded.iat;\n          }\n          return (Math.floor(Date.now() / 1000) - this.iat) >= validSeconds;\n        }\n      };\n    } catch (err) {\n      throw new VError(err, \"Failed to generate token\");\n    }\n  }\n\n  return prepareToken;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/credentials/ca/prepare.js":"\"use strict\";\n\nmodule.exports = function(dependencies) {\n  const resolve = dependencies.resolve;\n\n  function prepareCA(credentials) {\n    // Prepare Certificate Authority data if available.\n    var ca = [];\n\n    if (credentials.ca !== null) {\n      if(!Array.isArray(credentials.ca)) {\n        credentials.ca = [ credentials.ca ];\n      }\n      ca = credentials.ca.map( resolve );\n    }\n    if (ca.length === 0) {\n      ca = undefined;\n    }\n\n    return { ca };\n  }\n\n  return prepareCA;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/config.js":"\"use strict\";\n\nconst extend = require(\"./util/extend\");\n\nlet EndpointAddress = {\n  production: \"api.push.apple.com\",\n  development:    \"api.development.push.apple.com\"\n};\n\nmodule.exports = function(dependencies) {\n  const logger = dependencies.logger;\n  const prepareCertificate = dependencies.prepareCertificate;\n  const prepareToken = dependencies.prepareToken;\n  const prepareCA = dependencies.prepareCA;\n\n  function config(options) {\n    let config = {\n      token: null,\n      cert: \"cert.pem\",\n      key: \"key.pem\",\n      ca: null,\n      pfx: null,\n      passphrase: null,\n      production: (process.env.NODE_ENV === \"production\"),\n      address: null,\n      port: 443,\n      rejectUnauthorized: true,\n      connectionRetryLimit: 10,\n      heartBeat: 60000,\n    };\n\n    validateOptions(options);\n\n    extend(config, options);\n    configureAddress(config);\n\n    if (config.token) {\n      delete config.cert;\n      delete config.key;\n      delete config.pfx;\n\n      extend(config, { token: prepareToken(config.token) });\n    } else {\n      if (config.pfx || config.pfxData) {\n        config.cert = options.cert;\n        config.key = options.key;\n      }\n      extend(config, prepareCertificate(config));\n    }\n\n    extend(config, prepareCA(config));\n\n    return config;\n  }\n\n  function validateOptions(options) {\n    for (var key in options) {\n      if (options[key] === null || options[key] === undefined) {\n        logger(\"Option [\" + key + \"] is \" +  options[key] + \". This may cause unexpected behaviour.\");\n      }\n    }\n\n    if (options) {\n      if (options.passphrase && typeof options.passphrase !== \"string\") {\n        throw new Error(\"Passphrase must be a string\");\n      }\n\n      if (options.token) {\n        validateToken(options.token);\n      }\n    }\n  }\n\n  return config;\n};\n\nfunction validateToken(token) {\n  if (!token.keyId) {\n    throw new Error(\"token.keyId is missing\");\n  } else if(typeof token.keyId !== \"string\") {\n    throw new Error(\"token.keyId must be a string\");\n  }\n\n  if (!token.teamId) {\n    throw new Error(\"token.teamId is missing\");\n  } else if(typeof token.teamId !== \"string\") {\n    throw new Error(\"token.teamId must be a string\");\n  }\n}\n\nfunction configureAddress(options) {\n  if (!options.address) {\n    if (options.production) {\n      options.address = EndpointAddress.production;\n    }\n    else {\n      options.address = EndpointAddress.development;\n    }\n  }\n  else {\n    if (options.address === EndpointAddress.production) {\n      options.production = true;\n    }\n    else {\n      options.production = false;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/util/extend.js":"\"use strict\";\n\nmodule.exports = function extend(target, source) {\n  for (var key in source) {\n    if (source[key] !== undefined) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/protocol/endpoint.js":"\"use strict\";\n\nconst EventEmitter = require(\"events\");\n\nconst noop = () => {};\nconst noopLogger = {\n  fatal: noop,\n  error: noop,\n  warn : noop,\n  info : noop,\n  debug: noop,\n  trace: noop,\n\n  child: function() { return this; }\n};\n\nconst CLIENT_PRELUDE = Buffer.from(\"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\");\n\nmodule.exports = function(dependencies) {\n  const tls = dependencies.tls;\n  const protocol = dependencies.protocol;\n\n  function Endpoint(options) {\n    EventEmitter.call(this);\n\n    this.options = options;\n    options.host = options.host || options.address;\n    options.servername = options.address;\n\n    this._acquiredStreamSlots = 0;\n    this._maximumStreamSlots = 0;\n    this._lastSuccessPingedTime = null;\n    this._pingedThreshold = (this.options.heartBeat || 60000) * 2.5;\n    this._heartBeatInterval = (this.options.heartBeat || 60000);\n\n    options.ALPNProtocols = [\"h2\"];\n\n    this._connect();\n    this._setupHTTP2Pipeline();\n    this._heartBeatIntervalCheck = this._setupHTTP2HealthCheck();\n  }\n\n  Endpoint.prototype = Object.create(EventEmitter.prototype, {\n    availableStreamSlots: {\n      get: function() {\n        return this._maximumStreamSlots - this._acquiredStreamSlots;\n      }\n    }\n  });\n\n  Endpoint.prototype._setupHTTP2Pipeline = function _setupHTTP2Pipeline() {\n    const serializer = new protocol.Serializer(noopLogger.child(\"serializer\"));\n    const compressor = new protocol.Compressor(noopLogger.child(\"compressor\"), \"REQUEST\");\n    const deserializer = new protocol.Deserializer(noopLogger.child(\"deserializer\"));\n    const decompressor = new protocol.Decompressor(noopLogger.child(\"decompressor\"), \"RESPONSE\");\n\n    this._connection.pipe(compressor);\n    compressor.pipe(serializer);\n    serializer.pipe(this._socket);\n\n    this._socket.pipe(deserializer);\n    deserializer.pipe(decompressor);\n    decompressor.pipe(this._connection);\n\n    this._connection.on(\"RECEIVING_SETTINGS_HEADER_TABLE_SIZE\", compressor.setTableSizeLimit.bind(compressor));\n    this._connection.on(\"ACKNOWLEDGED_SETTINGS_HEADER_TABLE_SIZE\", decompressor.setTableSizeLimit.bind(decompressor));\n\n    this._connection.on(\"RECEIVING_SETTINGS_MAX_CONCURRENT_STREAMS\", maxStreams => {\n      this._maximumStreamSlots = maxStreams;\n      this.emit(\"wakeup\");\n    });\n\n    serializer.on(\"error\", this._protocolError.bind(this, \"serializer\"));\n    compressor.on(\"error\", this._protocolError.bind(this, \"compressor\"));\n    deserializer.on(\"error\", this._protocolError.bind(this, \"deserializer\"));\n    decompressor.on(\"error\", this._protocolError.bind(this, \"decompressor\"));\n  };\n\n  Endpoint.prototype._connect = function connect() {\n    this._socket = tls.connect(this.options);\n    this._socket.on(\"secureConnect\", this._connected.bind(this));\n    this._socket.on(\"error\", this._error.bind(this));\n    this._socket.on(\"close\", this._close.bind(this));\n    this._socket.on(\"end\", this.emit.bind(this, \"end\"));\n    this._socket.write(CLIENT_PRELUDE);\n\n    this._connection = new protocol.Connection(noopLogger, 1);\n    this._connection.on(\"error\", this._protocolError.bind(this, \"connection\"));\n    this._connection.on(\"GOAWAY\", this._goaway.bind(this));\n  };\n\n  Endpoint.prototype._connected = function connected() {\n    this.emit(\"connect\");\n  };\n\n  Endpoint.prototype._setupHTTP2HealthCheck = function healthcheck() {\n    return setInterval(() => {\n      if (this._lastSuccessPingedTime != null && (Date.now() - this._lastSuccessPingedTime) > this._pingedThreshold) {\n        this._error(\"Not receiving Ping response after \" + this._pingedThreshold + \" ms\");\n      } else {\n        this._connection.ping(() => { \n          this._lastSuccessPingedTime = Date.now(); \n        });\n      }\n    }, this._heartBeatInterval);\n  };\n\n  Endpoint.prototype._protocolError = function protocolError(component, errCode) {\n    this._error(component + \" error: \" + errCode);\n  };\n\n  Endpoint.prototype._error = function error(err) {\n    this.lastError = err;\n\n    this.emit(\"error\", err);\n  };\n\n  Endpoint.prototype._goaway = function goaway(frame) {\n    // When we receive a goaway we must be prepared to\n    // signal streams which have not been processed by the\n    // server enabling them to be re-enqueued. We hold\n    // onto the last stream ID to process it in `close`\n    this.lastStream = frame.last_stream;\n\n    if (frame.error === \"NO_ERROR\") {\n      return;\n    }\n\n    let message = \"GOAWAY: \" + frame.error;\n    if(frame.debug_data) {\n      message += \" \" + frame.debug_data.toString();\n    }\n    this._error(message);\n  }\n\n  Endpoint.prototype._close = function close() {\n    // After the endpoint closes we loop through all\n    // dangling streams to handle their state.\n    this._connection._streamIds.forEach( (stream, id) => {\n\n      // Ignore stream 0 (connection stream)\n      if (id === 0) {\n        return;\n      }\n\n      // let stream = this._connection._streamIds[id];\n\n      // Is stream unprocessed? (last_stream < id)\n      if (this.lastStream < id) {\n        stream.emit(\"unprocessed\");\n\n      } else if (this.lastError) {\n        // If it *has* been at least partially processed\n        // and an error has occurred\n        stream.emit(\"error\", this.lastError);\n      }\n    });\n  }\n\n  Endpoint.prototype.createStream = function createStream() {\n    let stream = this._connection.createStream();\n    this._connection._allocateId(stream);\n\n    this._acquiredStreamSlots += 1;\n    stream.on(\"end\", () => {\n      stream = null;\n      this._acquiredStreamSlots -= 1;\n      this.emit(\"wakeup\");\n\n      if (this._closePending) {\n        this.close();\n      }\n    });\n\n    return stream;\n  };\n\n  Endpoint.prototype.close = function close() {\n    if (this._acquiredStreamSlots === 0) {\n      this._connection.close();\n    }\n    this._closePending = true;\n  };\n\n  Endpoint.prototype.destroy = function destroy() {\n    clearInterval(this._heartBeatIntervalCheck);\n    this._socket.destroy();\n  };\n\n  return Endpoint;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/protocol/endpointManager.js":"\"use strict\";\n\nconst EventEmitter = require(\"events\");\nconst VError = require(\"verror\");\n\nmodule.exports = function(dependencies) {\n\n  const Endpoint = dependencies.Endpoint;\n\n  function EndpointManager(config) {\n    EventEmitter.call(this);\n\n    this._endpoints = [];\n    this._endpointIndex = 0;\n    this._config = config || {};\n    this._connectionFailures = 0;\n  }\n\n  EndpointManager.prototype = Object.create(EventEmitter.prototype);\n\n  EndpointManager.prototype.getStream = function getStream() {\n    for (let i=0; i < this._endpoints.length; i++) {\n      this._endpointIndex += 1;\n      this._endpointIndex %= this._endpoints.length;\n\n      if (this._endpoints[this._endpointIndex].availableStreamSlots > 0) {\n        return this._endpoints[this._endpointIndex].createStream();\n      }\n    }\n\n    if (!this.connectionRetryLimitReached()) {\n      this.createEndpoint();\n    }\n\n    return null;\n  };\n\n  EndpointManager.prototype.connectionRetryLimitReached = function connectionRetryLimitReached() {\n    if (!this._config.connectionRetryLimit) {\n      return false;\n    }\n\n    return this._connectionFailures >= this._config.connectionRetryLimit;\n  };\n\n  EndpointManager.prototype.createEndpoint = function createEndpoint() {\n    if (this._currentConnection || this._endpoints.length >= this._config.maxConnections) {\n      return;\n    }\n\n    const endpoint = new Endpoint(this._config);\n    this._currentConnection = endpoint;\n\n    endpoint.once(\"connect\", () => {\n      this._endpoints.push(endpoint);\n      this._connectionFailures = 0;\n      delete this._currentConnection;\n    });\n\n    endpoint.on(\"error\", err => {\n      endpoint.destroy();\n      this.removeEndpoint(endpoint);\n\n      if (this._currentConnection === endpoint) {\n        this._currentConnection = null;\n        if(this._endpoints.length === 0) {\n          this._connectionFailures += 1;\n          if (this.connectionRetryLimitReached()) {\n            this.emit(\"error\", new VError(err, \"endpoint error\"));\n            this._connectionFailures = 0;\n          }\n        }\n      }\n      \n      this.emit(\"wakeup\");\n    });\n\n    endpoint.on(\"end\", () => {\n      this.removeEndpoint(endpoint);\n      this.emit(\"wakeup\");\n    });\n\n    endpoint.on(\"wakeup\", this.emit.bind(this, \"wakeup\"));\n  };\n\n  EndpointManager.prototype.removeEndpoint = function removeEndpoint(endpoint) {\n      let index = this._endpoints.indexOf(endpoint);\n      if (index > -1) {\n        this._endpoints.splice(index, 1);\n      }\n  };\n\n  EndpointManager.prototype.shutdown = function shutdown() {\n    for(let endpoint of this._endpoints) {\n      endpoint.close();\n    }\n\n    if (this._currentConnection) {\n      this._currentConnection.close();\n      delete this._currentConnection;\n    }\n  };\n\n  return EndpointManager;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/client.js":"\"use strict\";\n\nconst VError = require(\"verror\");\nconst extend = require(\"./util/extend\");\n\nmodule.exports = function (dependencies) {\n  const config          = dependencies.config;\n  const EndpointManager = dependencies.EndpointManager;\n\n  function Client (options) {\n    this.config = config(options);\n\n    this.endpointManager = new EndpointManager(this.config);\n    this.endpointManager.on(\"wakeup\", () => {\n      while (this.queue.length > 0) {\n        const stream = this.endpointManager.getStream();\n        if (!stream) {\n          return;\n        }\n        const resolve = this.queue.shift();\n        resolve(stream);\n      }\n\n      if (this.shutdownPending) {\n        this.endpointManager.shutdown();\n      }\n    });\n\n    this.endpointManager.on(\"error\", (err) => {\n      this.queue.forEach((resolve) => {\n        resolve(Promise.reject(err));\n      });\n\n      this.queue = [];\n    });\n\n    this.queue = [];\n  }\n\n  Client.prototype.write = function write (notification, device, count) {\n    return this.getStream().then( stream => {\n      let tokenGeneration, status, responseData = \"\";\n      let retryCount = count || 0;\n\n      stream.setEncoding(\"utf8\");\n\n      stream.on(\"headers\", headers => {\n        status = headers[\":status\"];\n      });\n\n      stream.on(\"data\", data => {\n        responseData = responseData + data;\n      });\n\n      let headers = extend({\n        \":scheme\": \"https\",\n        \":method\": \"POST\",\n        \":authority\": this.config.address,\n        \":path\": \"/3/device/\" + device,\n      }, notification.headers);\n\n      if (this.config.token) {\n        if (this.config.token.isExpired(3300)) {\n          this.config.token.regenerate(this.config.token.generation);\n        }\n        headers.authorization = \"bearer \" + this.config.token.current;\n        tokenGeneration = this.config.token.generation;\n      }\n\n      stream.headers(headers);\n      stream.write(notification.body);\n\n      return new Promise ( resolve => {\n        stream.on(\"end\", () => {\n          if (status === \"200\") {\n            resolve({ device });\n          } else if (responseData !== \"\") {\n            const response = JSON.parse(responseData);\n\n            if (status === \"403\" && response.reason === \"ExpiredProviderToken\" && retryCount < 2) {\n              this.config.token.regenerate(tokenGeneration);\n              resolve(this.write(notification, device, retryCount + 1));\n              return;\n            } else if (status === \"500\" && response.reason === \"InternalServerError\") {\n              stream.connection.close();\n              let error = new VError(\"Error 500, stream ended unexpectedly\");\n              resolve({ device, error });\n              return;\n            }\n\n            resolve({ device, status, response });\n          } else {\n            let error = new VError(\"stream ended unexpectedly\");\n            resolve({ device, error });\n          }\n        });\n\n        stream.on(\"unprocessed\", () => {\n          resolve(this.write(notification, device));\n        });\n\n        stream.on(\"error\", err => {\n          let error;\n          if (typeof err === \"string\") {\n            error = new VError(\"apn write failed: %s\", err);\n          } else {\n            error = new VError(err, \"apn write failed\");\n          }\n          resolve({ device, error });\n        });\n\n        stream.end();\n      });\n    }).catch( error => {\n      return { device, error };\n    });\n  };\n\n  Client.prototype.getStream = function getStream() {\n    return new Promise( resolve => {\n      const stream = this.endpointManager.getStream();\n      if (!stream) {\n        this.queue.push(resolve);\n      } else {\n        resolve(stream);\n      }\n    });\n  };\n\n  Client.prototype.shutdown = function shutdown() {\n    if (this.queue.length > 0) {\n      this.shutdownPending = true;\n      return;\n    }\n    this.endpointManager.shutdown();\n  };\n\n  return Client;\n}\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/provider.js":"\"use strict\";\nconst EventEmitter = require(\"events\");\n\nmodule.exports = function(dependencies) {\n  const Client = dependencies.Client;\n\n  function Provider (options) {\n    if(false === (this instanceof Provider)) {\n      return new Provider(options);\n    }\n\n    this.client = new Client(options);\n\n    EventEmitter.call(this);\n  }\n\n  Provider.prototype = Object.create(EventEmitter.prototype);\n\n  Provider.prototype.send = function send(notification, recipients) {\n    const builtNotification = {\n      headers: notification.headers(),\n      body:    notification.compile(),\n    };\n\n    if (!Array.isArray(recipients)) {\n      recipients = [recipients];\n    }\n\n    return Promise.all( recipients.map( token => this.client.write(builtNotification, token) ))\n      .then( responses => {\n      let sent = [];\n      let failed = [];\n\n      responses.forEach( response => {\n        if (response.status || response.error) {\n          failed.push(response);\n        } else {\n          sent.push(response);\n        }\n      });\n      return {sent, failed};\n    });\n  };\n\n  Provider.prototype.shutdown = function shutdown() {\n    this.client.shutdown();\n  };\n\n  return Provider;\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/notification/index.js":"\"use strict\";\n/**\n * Create a notification\n * @constructor\n */\nfunction Notification (payload) {\n  this.encoding = \"utf8\";\n  this.payload = {};\n  this.compiled = false;\n\n  this.aps = {};\n  this.expiry = 0;\n  this.priority = 10;\n\n  if (payload) {\n    for(let key in payload) {\n      if (payload.hasOwnProperty(key)) {\n        this[key] = payload[key];\n      }\n    }\n  }\n}\n\nNotification.prototype = require(\"./apsProperties\");\n\n// Create setter methods for properties\n[\"payload\", \"expiry\", \"priority\", \"alert\", \"body\", \"locKey\",\n\"locArgs\", \"title\", \"subtitle\", \"titleLocKey\", \"titleLocArgs\", \"action\",\n\"actionLocKey\", \"launchImage\", \"badge\", \"sound\", \"contentAvailable\",\n\"mutableContent\", \"mdm\", \"urlArgs\", \"category\", \"threadId\"].forEach( propName => {\n  const methodName = \"set\" + propName[0].toUpperCase() + propName.slice(1);\n  Notification.prototype[methodName] = function (value) {\n    this[propName] = value;\n    return this;\n  };\n});\n\nNotification.prototype.headers = function headers() {\n  let headers = {};\n\n  if (this.priority !== 10) {\n    headers[\"apns-priority\"] = this.priority;\n  }\n\n  if (this.id) {\n    headers[\"apns-id\"] = this.id;\n  }\n\n  if (this.expiry > 0) {\n    headers[\"apns-expiration\"] = this.expiry;\n  }\n\n  if (this.topic) {\n    headers[\"apns-topic\"] = this.topic;\n  }\n\n  if (this.collapseId) {\n    headers[\"apns-collapse-id\"] = this.collapseId;\n  }\n\n  return headers;\n};\n\n/**\n * Compile a notification down to its JSON format. Compilation is final, changes made to the notification after this method is called will not be reflected in further calls.\n * @returns {String} JSON payload for the notification.\n * @since v1.3.0\n */\nNotification.prototype.compile = function () {\n  if(!this.compiled) {\n    this.compiled = JSON.stringify(this);\n  }\n  return this.compiled;\n};\n\n/**\n * @returns {Number} Byte length of the notification payload\n * @since v1.2.0\n */\nNotification.prototype.length = function () {\n  return Buffer.byteLength(this.compile(), this.encoding || \"utf8\");\n};\n\n/**\n * @private\n */\nNotification.prototype.apsPayload = function() {\n  var aps = this.aps;\n\n  return Object.keys(aps).find( key => aps[key] !== undefined ) ? aps : undefined;\n};\n\nNotification.prototype.toJSON = function () {\n  if (this.rawPayload != null) {\n    return this.rawPayload;\n  }\n\n  if (typeof this._mdm === \"string\") {\n    return { \"mdm\": this._mdm };\n  }\n\n  return Object.assign({}, this.payload, {aps: this.apsPayload()});\n};\n\nmodule.exports = Notification;\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/notification/apsProperties.js":"\"use strict\";\n\nmodule.exports = {\n  set alert(value) {\n    this.aps.alert = value;\n  },\n\n  get body() {\n    if (this.aps.alert) {\n      return this.aps.alert.body || this.aps.alert;\n    }\n    return this.aps.alert;\n  },\n\n  set body(value) {\n    if (typeof this.aps.alert !== \"object\") {\n      this.aps.alert = value;\n    }\n    else {\n      this.prepareAlert();\n      this.aps.alert.body = value;\n    }\n  },\n\n  set locKey(value) {\n    this.prepareAlert();\n    this.aps.alert[\"loc-key\"] = value;\n  },\n\n  set locArgs(value) {\n    this.prepareAlert();\n    this.aps.alert[\"loc-args\"] = value;\n  },\n\n  set title(value) {\n    this.prepareAlert();\n    this.aps.alert.title = value;\n  },\n\n  set subtitle(value) {\n    this.prepareAlert();\n    this.aps.alert.subtitle = value;\n  },\n\n  set titleLocKey(value) {\n    this.prepareAlert();\n    this.aps.alert[\"title-loc-key\"] = value;\n  },\n\n  set titleLocArgs(value) {\n    this.prepareAlert();\n    this.aps.alert[\"title-loc-args\"] = value;\n  },\n\n  set action(value) {\n    this.prepareAlert();\n    this.aps.alert.action = value;\n  },\n\n  set actionLocKey(value) {\n    this.prepareAlert();\n    this.aps.alert[\"action-loc-key\"] = value;\n  },\n\n  set launchImage(value) {\n    this.prepareAlert();\n    this.aps.alert[\"launch-image\"] = value;\n  },\n\n  set badge(value) {\n    if (typeof value === \"number\" || value === undefined) {\n      this.aps.badge = value;\n    }\n  },\n\n  set sound(value) {\n    if (typeof value === \"string\" || value === undefined) {\n      this.aps.sound = value;\n    }\n  },\n\n  set contentAvailable(value) {\n    if (value === true || value === 1) {\n      this.aps[\"content-available\"] = 1;\n    } else {\n      this.aps[\"content-available\"] = undefined;\n    }\n  },\n\n  set mutableContent(value) {\n    if (value === true || value === 1) {\n      this.aps[\"mutable-content\"] = 1;\n    } else {\n      this.aps[\"mutable-content\"] = undefined;\n    }\n  },\n\n  set mdm(value) {\n    this._mdm = value;\n  },\n\n  set urlArgs(value) {\n    if (Array.isArray(value) || value === undefined) {\n      this.aps[\"url-args\"] = value;\n    }\n  },\n\n  set category(value) {\n    if (typeof value === \"string\" || value === undefined) {\n      this.aps.category = value;\n    }\n  },\n\n  set threadId(value) {\n    if(typeof value === \"string\" || value === undefined) {\n      this.aps[\"thread-id\"] = value;\n    }\n  },\n\n  prepareAlert: function () {\n    if (typeof this.aps.alert !== \"object\") {\n      this.aps.alert = {\"body\": this.aps.alert};\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-apn/apn/lib/token.js":"\"use strict\";\n/**\n * Validates a device token\n *\n * Will convert to string and removes invalid characters as required.\n */\nfunction token(input) {\n  let token;\n  \n  if (typeof input === \"string\") {\n    token = input;\n  } else if (Buffer.isBuffer(input)) {\n    token = input.toString(\"hex\");\n  }\n\n  token = token.replace(/[^0-9a-f]/gi, \"\");\n\n  if (token.length === 0) {\n    throw new Error(\"Token has invalid length\");\n  }\n\n  return token;\n}\n\nmodule.exports = token;\n"}